name: Rust

on:
  push:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - 'src/**'
      - 'build.rs'
      - '.github/**/*.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  DEBUG_OUTPUT: "true"
  CONTAINER_IMAGE_NAME: unfoldedcircle/integration-hass
  APP_NAME: uc-intg-hass
  BIN_OUTPUT_PATH: binaries
  HASH_FILENAME: uc-intg-hass.hash
  LINUX_ARTIFACT_SUFFIX: Linux-x64
  CARGO_TERM_COLOR: always
  # Enable GitHub cache (not recommended for self-hosted runner!): true | false
  # TODO enable cache based on runner
  USE_GH_CACHE: "true"
  # Enable Rust incremental build. Recommended for self-hosted runner since we keep target artifacts, not recommended for GitHub runner
  # TODO enable incremental build based on runner
  INCREMENTAL_BUILD: "false"

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Run rustfmt
        run: cargo fmt --all -- --check

  test:
    # run tests & clippy in same job for improved caching & faster builds
    name: Test and clippy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: setup
        uses: ./.github/actions/rust-setup
        with:
          build: debug
          toolchain_components: clippy
          use_gh_cache: ${{ env.USE_GH_CACHE }}
          incremental: ${{ env.INCREMENTAL_BUILD }}

      - run: cargo test --features mdns-sd

      - name: Run clippy
        run: cargo clippy --features mdns-sd -- -D warnings

  build:
    name: Build release
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # History of 200 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 200
      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          APP_VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.APP_NAME }}-$APP_VERSION-${{ env.LINUX_ARTIFACT_SUFFIX }}" >> $GITHUB_ENV

      - id: setup
        uses: ./.github/actions/rust-setup
        with:
          build: release
          use_gh_cache: ${{ env.USE_GH_CACHE }}
          incremental: ${{ env.INCREMENTAL_BUILD }} && !contains(github.ref, 'tags/v')

      - name: Release build
        shell: bash
        run: cargo build --features mdns-sd --release

# This takes over 5 min! Do it manually...
#      - name: Create license report for releases
#        if: "contains(github.ref, 'tags/v')"
#        shell: bash
#        run: |
#          mkdir -p ${GITHUB_WORKSPACE}/${{env.BIN_OUTPUT_PATH }}
#          cargo install cargo-about
#          cargo about generate about.hbs > ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/integration-hass_licenses.html
#          cargo about generate about-markdown.hbs > ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/integration-hass_licenses.md

      # Archive is required to preserve file permissions and re-used for release uploads
      - name: Create upload artifact
        shell: bash
        run: |
          ls -la target/release
          mkdir -p ${GITHUB_WORKSPACE}/${{env.BIN_OUTPUT_PATH }}
          cp target/release/${{ env.APP_NAME }} ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}
          cp configuration.yaml ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}
          echo "VERSION=${{ env.APP_VERSION }}" > ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/version.txt
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/version.txt
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }} .

      - uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  cross_compile:
    name: ${{ matrix.config.name }} build
    runs-on: ubuntu-22.04
    needs: test
    strategy:
      matrix:
        config:
          - {
            name: "Remote Two", artifact: "UCR2",
            # cross compilation target architecture
            architecture: "aarch64",
            abi: "gnu",
            target_triple: "aarch64-none-linux-gnu",
            # Rust target
            target: "aarch64-unknown-linux-gnu",
            target_id: "aarch64_unknown_linux_gnu",
            buildroot-sdk-base-url: "https://github.com/unfoldedcircle/ucr2-toolchain/releases/download/v1.0.0",
            buildroot-sdk-file-name: "ucr2-aarch64-toolchain-1.0.0-noqt.tar.gz",
            buildroot-sdk-name: "aarch64-buildroot-linux-gnu_sdk-buildroot",
            # linker must match ./cargo/config.toml target, otherwise the host linker is used! There's probably an easier way :-)
            linker: "ucr2-aarch64-none-linux-gnu-gcc"
          }

    steps:
      - name: Checkout ${{ env.PROJECT_NAME}}
        uses: actions/checkout@v4
        with:
          # History of 200 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 200

      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          APP_VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.APP_NAME }}-$APP_VERSION-${{ matrix.config.artifact }}" >> $GITHUB_ENV

      - id: setup
        uses: ./.github/actions/rust-setup
        with:
          target: ${{ matrix.config.target }}
          build: release
          use_gh_cache: ${{ env.USE_GH_CACHE }}
          incremental: ${{ env.INCREMENTAL_BUILD }} && !contains(github.ref, 'tags/v')

      - name: "Cross compile: install target ${{ matrix.config.target }}"
        run: |
          rustup target add ${{ matrix.config.target }}

      - name: "Cross compile: install ${{ matrix.config.name }} Buildroot SDK"
        run: |
          wget -qO- ${{ matrix.config.buildroot-sdk-base-url }}/${{ matrix.config.buildroot-sdk-file-name }} | tar -xz
          
          ./${{ matrix.config.buildroot-sdk-name }}/relocate-sdk.sh
          # remove erroneous symlink causing issues with cargo build.
          # If /usr changes to a real directory, then rm fails and we get feedback that the SDK changed
          ls -la ./${{ matrix.config.buildroot-sdk-name }}
          rm ./${{ matrix.config.buildroot-sdk-name }}/usr

      - name: "Cross compile: configure Rust target for ${{ matrix.config.name }} Buildroot SDK"
        # there should be an easier way without a wrapper file, and there most likely is, but it's good enough for now...
        run: |
          mkdir -p ~/.cargo/bin/
          cat >~/.cargo/bin/${{ matrix.config.linker }} <<EOL
          #!/bin/bash
          \$GITHUB_WORKSPACE/${{ matrix.config.buildroot-sdk-name }}/bin/${{ matrix.config.target_triple }}-gcc --sysroot=\$GITHUB_WORKSPACE/${{ matrix.config.buildroot-sdk-name }}/${{ matrix.config.architecture }}-buildroot-linux-${{ matrix.config.abi }}/sysroot "\$@"
          EOL
          chmod +x ~/.cargo/bin/${{ matrix.config.linker }}
          cat ~/.cargo/bin/${{ matrix.config.linker }}
          ${{ matrix.config.linker }} --version

      - name: "Cross compile: build"
        run: |
          export UCR2_SDK=$GITHUB_WORKSPACE/${{ matrix.config.buildroot-sdk-name }}
          export CC_${{ matrix.config.target_id }}=$UCR2_SDK/bin/${{ matrix.config.target_triple }}-gcc
          export CXX_${{ matrix.config.target_id }}=$UCR2_SDK/bin/${{ matrix.config.target_triple }}-g++
          export AR_${{ matrix.config.target_id }}=$UCR2_SDK/bin/${{ matrix.config.target_triple }}-ar
          export PKG_CONFIG_PATH=$UCR2_SDK/${{ matrix.config.architecture }}-buildroot-linux-${{ matrix.config.abi }}/sysroot/usr/lib/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=$UCR2_SDK/${{ matrix.config.architecture }}-buildroot-linux-${{ matrix.config.abi }}/sysroot
          export BINDGEN_EXTRA_CLANG_ARGS=--sysroot="$PKG_CONFIG_SYSROOT_DIR"
          $CC_${{ matrix.config.target_id }} --version
          $CXX_${{ matrix.config.target_id }} --version
          $AR_${{ matrix.config.target_id }} --version
          export RUST_BACKTRACE=1
          cargo build --release --target=${{ matrix.config.target }}

      # Archive is required to preserve file permissions and re-used for release uploads
      - name: Create upload artifact
        shell: bash
        run: |
          ls -la target/${{ matrix.config.target }}/release
          mkdir -p ${GITHUB_WORKSPACE}/${{env.BIN_OUTPUT_PATH }}
          cp target/${{ matrix.config.target }}/release/${{ env.APP_NAME }} ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}
          cp configuration.yaml ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}
          echo "VERSION=${{ env.APP_VERSION }}" > ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/version.txt
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/version.txt
          echo "TOOLCHAIN=${{ matrix.config.target }}" >> ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }}/version.txt
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/${{ env.BIN_OUTPUT_PATH }} .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  release:
    name: GitHub release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    needs: [build, cross_compile]
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Log
        if: env.DEBUG_OUTPUT == 'true'
        shell: bash
        run: |
          echo "--- Structure of downloaded artifacts ---"
          ls -R
          echo "--- Environment ---"
          printenv

      # Use a common timestamp for all matrix build artifacts
      - name: Set build timestamp
        run: |
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      - name: Extract tar.gz build archives from downloaded artifacts
        run: |
          # Files are wrapped in tar from actions/upload-artifact, then extracted into a directory by actions/download-artifact
          ls -lah
          for D in * 
            do if [ -d "${D}" ]; then
              echo "Archive directory: $D"
              ls -lah $D/*
              mv $D/* ./
            fi
          done;
          ls -lah

      # Add timestamp to development builds
      - name: Create GitHub development build archives
        if: "!contains(github.ref, 'tags/v')"
        run: |
          echo "append timestamp for development builds"
          for filename in *.tar.gz; do mv $filename "$(basename $filename .tar.gz)-${{ env.TIMESTAMP }}.tar.gz"; done;
          echo "create hashes"
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;
          ls -lah

      - name: Create Pre-Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}

      - name: Create GitHub release archives
        if: "contains(github.ref, 'tags/v')"
        run: |
          echo "create hashes"
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;
          ls -lah

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}

  container:
    name: Create Docker image
    if: "contains(github.ref, 'tags/v')" # only publish releases!
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ env.LINUX_ARTIFACT_SUFFIX }}*"

      - name: Log
        if: env.DEBUG_OUTPUT == 'true'
        shell: bash
        run: |
          echo "--- Structure of downloaded artifacts ---"
          ls -R
          echo "--- Environment ---"
          printenv

      - name: Check out repo for Docker build
        uses: actions/checkout@v3
        with:
          # needs to be a subdirectory, otherwise the workspace gets erased
          path: src

      - name: Extract release for Docker build
        shell: bash
        run: |
          mkdir -p ./src/docker/app
          ls -lah
          cd *${{ env.LINUX_ARTIFACT_SUFFIX }}
          for filename in *${{ env.LINUX_ARTIFACT_SUFFIX }}*.tar.gz; do
            echo "Extracting release file for Docker build: $filename"
            tar xvzf $filename -C ../src/docker/app
            # there should only be one Linux release :-)
            break
          done;

      - name: Set image labels
        shell: bash
        run: |
          echo "Sourcing version information from packaged version file:"
          cat src/docker/app/version.txt
          source src/docker/app/version.txt
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Set development image tag
        if: "!contains(github.ref, 'tags/v')"
        run: |
          echo "IMAGE_TAGS=${CONTAINER_IMAGE_NAME}:latest" >> $GITHUB_ENV          

      - name: Set release image tag
        if: "contains(github.ref, 'tags/v')"
        shell: bash
        run: |
          TAG="${GITHUB_REF#*tags/v}"
          echo "IMAGE_TAGS=${CONTAINER_IMAGE_NAME}:latest,${CONTAINER_IMAGE_NAME}:$TAG" >> $GITHUB_ENV          

      - name: Log
        if: env.DEBUG_OUTPUT == 'true'
        shell: bash
        run: |
          ls -lah
          ls -lah ./src/docker/app
          echo "--- Environment ---"
          printenv
          echo "-------------------"
          echo "BUILD_DATE: ${{ env.BUILD_DATE }}"
          echo "VERSION   : ${{ env.APP_VERSION }}"
          echo "REVISION  : ${{ env.GITHUB_SHA }}"
          echo "IMAGE_TAGS: ${{ env.IMAGE_TAGS }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: src/docker
          push: true
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.APP_VERSION }}
            REVISION=${{ env.GITHUB_SHA }}
          tags: ${{ env.IMAGE_TAGS }}
